/**
 * @author Ali M. Jaradat
 * @email AmJaradat01@gmail.com
 * @since 1-Jan-2022
 * @version 1.0.0
 * @file This file manages the generation and update of the .zshrc file, including the configuration of plugins and themes.
 * @lastModified 4-Sep-2024
 */

import fs from 'fs';
import path from 'path';
import os from 'os';
import chalk from 'chalk';

// Function to extract existing plugins from the .zshrc file
function extractExistingPlugins(zshrcContent) {
    const pluginMatch = zshrcContent.match(/plugins=\(([^)]+)\)/);
    if (pluginMatch && pluginMatch[1]) {
        return pluginMatch[1].split(' ').filter(Boolean); // Split by space and filter out any empty values
    }
    return [];
}

// Function to generate the .zshrc content based on selected plugins and theme
export function generateZshrcContent(theme, plugins = []) {
    // Ensure plugins array is not empty, and fall back to default plugins if necessary
    if (!Array.isArray(plugins) || plugins.length === 0) {
        plugins = ['git'];  // Default to 'git' if no plugins are selected
    }

    let zshrcContent = `
# ==============================
#  Awesome-Lazy-Zsh Configuration
#  Generated by Awesome-Lazy-Zsh
#  https://github.com/AmJaradat01/awesome-lazy-zsh
# ==============================

# If you come from bash you might have to change your \$PATH.
# export PATH=\$HOME/bin:\$HOME/.local/bin:/usr/local/bin:\$PATH

# Path to your Oh My Zsh installation.
export ZSH="\$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo \$RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="${theme}"

# Plugins
plugins=(${plugins.join(' ')})

source \$ZSH/oh-my-zsh.sh

# User configuration
`;

    // Add Homebrew PATH based on architecture
    if (os.platform() === 'linux') {
        zshrcContent += `
# Homebrew PATH for Linux
export PATH="/home/linuxbrew/.linuxbrew/bin:\$PATH"
`;
    } else if (os.arch() === 'arm64') {
        zshrcContent += `
# Homebrew PATH for Apple Silicon
export PATH="/opt/homebrew/bin:\$PATH"
`;
    } else {
        zshrcContent += `
# Homebrew PATH for Intel Macs
export PATH="/usr/local/bin:\$PATH"
`;
    }

    // Add Visual Studio Code Path
    if (plugins.includes('vscode')) {
        zshrcContent += `
# Visual Studio Code Path
export PATH="\$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
`;
    }

    // Add Docker Path and aliases
    if (plugins.includes('docker') || plugins.includes('docker-compose')) {
        zshrcContent += `
# Docker Path
export PATH="\$PATH:/Applications/Docker.app/Contents/Resources/bin/"

# Docker Aliases
alias dps='docker ps'
alias dstop='docker stop \$(docker ps -a -q)'
alias drm='docker rm \$(docker ps -a -q)'
alias dimages='docker images'
alias dbuild='docker build -t'
`;
    }

    // Add Kubernetes alias
    if (plugins.includes('kubectl')) {
        zshrcContent += `
# Kubernetes Alias
alias k8s-start='kubectl apply -f deployment.yaml'
`;
    }

    // Add NVM setup
    if (plugins.includes('nvm')) {
        zshrcContent += `
# NVM Setup
export NVM_DIR="\$HOME/.nvm"
[ -s "\$NVM_DIR/nvm.sh" ] && . "\$NVM_DIR/nvm.sh"
[ -s "\$NVM_DIR/bash_completion" ] && . "\$NVM_DIR/bash_completion"
`;
    }

    // Add Git branch function
    if (plugins.includes('git') || plugins.includes('git-flow')) {
        zshrcContent += `
# Git Branch Function
git_branch() {
    git branch 2>/dev/null | grep '^*' | colrm 1 2
}
`;
    }

    // Add Starship prompt initialization if chosen
    if (theme === 'starship') {
        zshrcContent += `
# Starship Prompt Initialization
eval "\$(starship init zsh)"
`;
    }

    return zshrcContent;
}

// Function to update the .zshrc file with selected plugins and theme
export function updateZshrc(newPlugins, theme) {
    const zshrcPath = path.join(os.homedir(), '.zshrc');

    try {
        // Generate full .zshrc content with selected plugins and theme
        const zshrcContent = generateZshrcContent(theme, newPlugins);

        // Write the updated content to the .zshrc file
        fs.writeFileSync(zshrcPath, zshrcContent, 'utf-8');
        console.log(chalk.green(`✅ .zshrc updated with selected plugins and theme: ${theme}`));
    } catch (error) {
        console.error(chalk.red(`❌ Error updating .zshrc: ${error.message}`));
    }
}
